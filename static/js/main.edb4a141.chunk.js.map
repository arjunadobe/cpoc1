{"version":3,"sources":["components/cameraHandler/CameraHandler.js","app-code-context.js","components/scannerPrototype/scannerPrototype.js","App.js","serviceWorker.js","index.js"],"names":["CameraHandler","useState","isCameraSupported","setCameraSupported","decoder","useRef","WasmDecoder","getInstance","current","useEffect","navigator","mediaDevices","getUserMedia","console","log","fallback","onFindBarcode","barcode","alert","JSON","stringify","className","role","aria-label","id","AppCodeContext","React","createContext","code","type","setCode","data","setType","value","ScannerPrototype","setCodeData","setTypeData","Provider","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+QAiDeA,G,MA5CO,WAAO,IAAD,EACqBC,oBAAS,GAD9B,mBACpBC,EADoB,KACDC,EADC,KAEVC,EAAaC,iBAAOC,IAAYC,YAAY,iBAArDC,QAYR,OAVAC,qBAAU,WACLC,UAAUC,cAAgBD,UAAUC,aAAaC,cACpDT,GAAmB,GAEpBU,QAAQC,IAAI,iBACV,IAMF,oCACEZ,EACA,kBAAC,WAAD,CAAUa,SAAU,4CACnB,kBAAC,IAAD,CAAqBX,QAASA,EAASY,cAP3C,SAAuBC,GACtBC,MAAMC,KAAKC,UAAUH,QASnB,GAECf,EAcD,GAbA,yBAAKmB,UAAU,8BACd,6BACC,wGAEY,IACX,0BAAMC,KAAK,MAAMC,aAAW,iBAA5B,iBAID,gEAMH,4BAAQC,GAAG,gBC1CDC,EAAiBC,IAAMC,cAAc,CAChDC,KAAM,GACNC,KAAM,GACNC,QAAS,SAACC,KACVC,QAAS,SAACC,OCgBGC,EAjBU,WAAO,IAAD,EACDjC,mBAAS,IADR,mBACtB2B,EADsB,KAChBO,EADgB,OAEDlC,mBAAS,IAFR,mBAEtB4B,EAFsB,KAEhBO,EAFgB,KAS7B,OACE,kBAACX,EAAeY,SAAhB,CAAyBJ,MAAO,CAAEL,OAAME,QAP1B,SAACG,GACfE,EAAYF,IAMqCJ,OAAMG,QAJzC,SAACC,GACfG,EAAYH,MAIV,yBAAKZ,UAAU,kBACb,kBAAC,EAAD,SCLOiB,EARH,WACV,OACE,6BACE,kBAAC,EAAD,QCKAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BrC,UAAUsC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf9C,UAAUsC,cAAcS,YAI1B5C,QAAQC,IACN,iHAKEiC,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBtC,QAAQC,IAAI,sCAGRiC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAAC,GACLhD,QAAQgD,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBrC,UAAW,CAGzE,GADkB,IAAIyD,IAAIC,SAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,SAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpE,UAAUsC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BT,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL/C,QAAQC,IACN,oEAvFAoE,CAAwBpC,EAAOC,GAI/BrC,UAAUsC,cAAc+B,MAAM7B,MAAK,WACjCrC,QAAQC,IACN,iHAMJ+B,EAAgBC,EAAOC,OClC/BC,K","file":"static/js/main.edb4a141.chunk.js","sourcesContent":["import React, {  Suspense, useState, useEffect, useRef } from \"react\";\r\nimport { WasmDecoder } from \"@impactdk/barcode-scanner\";\r\nimport { ReactBarcodeScanner  } from \"@impactdk/react-barcode-scanner\";\r\nimport \"./cameraHandler.css\";\r\n\r\nconst CameraHandler = () => {\r\n\tconst [isCameraSupported, setCameraSupported] = useState(false);\r\n\tconst { current: decoder  } = useRef(WasmDecoder.getInstance(\"/path2assets\"));\r\n\r\n\tuseEffect(() => {\r\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\t\t\tsetCameraSupported(true);\r\n\t\t}\r\n\t\tconsole.log(\"did mounted\");\r\n\t}, []);\r\n\r\n\tfunction handleBarcode(barcode: string): void {\r\n\t\talert(JSON.stringify(barcode));\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{isCameraSupported ? (\r\n\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\r\n\t\t\t\t\t<ReactBarcodeScanner decoder={decoder} onFindBarcode={handleBarcode}  />\r\n\t\t\t\t</Suspense>\r\n\t\t\t) : (\r\n\t\t\t\t\"\"\r\n\t\t\t)}\r\n\t\t\t{!isCameraSupported ? (\r\n\t\t\t\t<div className=\"cameraHandler__unsopported\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tYour device does not support/enabled camera access or something\r\n\t\t\t\t\t\t\twent wrong{\" \"}\r\n\t\t\t\t\t\t\t<span role=\"img\" aria-label=\"thinking-face\">\r\n                ðŸ¤”\r\n              </span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>You can enter the barcode below</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t\"\"\r\n\t\t\t)}\r\n\t\t\t<canvas id=\"Mycanvas\"></canvas>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default CameraHandler;\r\n","import React from \"react\";\r\n\r\nexport const AppCodeContext = React.createContext({\r\n  code: \"\",\r\n  type: \"\",\r\n  setCode: (data) => {},\r\n  setType: (value) => {},\r\n});\r\n","import React, { useState } from \"react\";\r\nimport CameraHandler from \"../cameraHandler/CameraHandler\";\r\n\r\nimport { AppCodeContext } from \"../../app-code-context\";\r\n\r\nconst ScannerPrototype = () => {\r\n  const [code, setCodeData] = useState(\"\");\r\n  const [type, setTypeData] = useState(\"\");\r\n  const setCode = (value) => {\r\n    setCodeData(value);\r\n  };\r\n  const setType = (value) => {\r\n    setTypeData(value);\r\n  };\r\n  return (\r\n    <AppCodeContext.Provider value={{ code, setCode, type, setType }}>\r\n      <div className=\"card-container\">\r\n        <CameraHandler />\r\n      </div>\r\n    </AppCodeContext.Provider>\r\n  );\r\n};\r\nexport default ScannerPrototype;\r\n","import React from \"react\";\r\nimport \"./App.less\";\r\nimport ScannerPrototype from \"./components/scannerPrototype/scannerPrototype\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <ScannerPrototype></ScannerPrototype>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}